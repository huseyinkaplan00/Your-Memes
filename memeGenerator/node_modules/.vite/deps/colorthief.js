import "./chunk-AC2VUBZ6.js";

// node_modules/colorthief/dist/color-thief.mjs
if (!t)
  var t = { map: function(t2, r2) {
    var n2 = {};
    return r2 ? t2.map(function(t3, o2) {
      return n2.index = o2, r2.call(n2, t3);
    }) : t2.slice();
  }, naturalOrder: function(t2, r2) {
    return t2 < r2 ? -1 : t2 > r2 ? 1 : 0;
  }, sum: function(t2, r2) {
    var n2 = {};
    return t2.reduce(r2 ? function(t3, o2, e) {
      return n2.index = e, t3 + r2.call(n2, o2);
    } : function(t3, r3) {
      return t3 + r3;
    }, 0);
  }, max: function(r2, n2) {
    return Math.max.apply(null, n2 ? t.map(r2, n2) : r2);
  } };
var r = function() {
  var r2 = 5, n2 = 8 - r2, o2 = 1e3;
  function e(t2, n3, o3) {
    return (t2 << 2 * r2) + (n3 << r2) + o3;
  }
  function u(t2) {
    var r3 = [], n3 = false;
    function o3() {
      r3.sort(t2), n3 = true;
    }
    return { push: function(t3) {
      r3.push(t3), n3 = false;
    }, peek: function(t3) {
      return n3 || o3(), void 0 === t3 && (t3 = r3.length - 1), r3[t3];
    }, pop: function() {
      return n3 || o3(), r3.pop();
    }, size: function() {
      return r3.length;
    }, map: function(t3) {
      return r3.map(t3);
    }, debug: function() {
      return n3 || o3(), r3;
    } };
  }
  function a(t2, r3, n3, o3, e2, u2, a2) {
    var i3 = this;
    i3.r1 = t2, i3.r2 = r3, i3.g1 = n3, i3.g2 = o3, i3.b1 = e2, i3.b2 = u2, i3.histo = a2;
  }
  function i2() {
    this.vboxes = new u(function(r3, n3) {
      return t.naturalOrder(r3.vbox.count() * r3.vbox.volume(), n3.vbox.count() * n3.vbox.volume());
    });
  }
  function c(r3, n3) {
    if (n3.count()) {
      var o3 = n3.r2 - n3.r1 + 1, u2 = n3.g2 - n3.g1 + 1, a2 = t.max([o3, u2, n3.b2 - n3.b1 + 1]);
      if (1 == n3.count())
        return [n3.copy()];
      var i3, c2, f, s, h = 0, v = [], l = [];
      if (a2 == o3)
        for (i3 = n3.r1; i3 <= n3.r2; i3++) {
          for (s = 0, c2 = n3.g1; c2 <= n3.g2; c2++)
            for (f = n3.b1; f <= n3.b2; f++)
              s += r3[e(i3, c2, f)] || 0;
          v[i3] = h += s;
        }
      else if (a2 == u2)
        for (i3 = n3.g1; i3 <= n3.g2; i3++) {
          for (s = 0, c2 = n3.r1; c2 <= n3.r2; c2++)
            for (f = n3.b1; f <= n3.b2; f++)
              s += r3[e(c2, i3, f)] || 0;
          v[i3] = h += s;
        }
      else
        for (i3 = n3.b1; i3 <= n3.b2; i3++) {
          for (s = 0, c2 = n3.r1; c2 <= n3.r2; c2++)
            for (f = n3.g1; f <= n3.g2; f++)
              s += r3[e(c2, f, i3)] || 0;
          v[i3] = h += s;
        }
      return v.forEach(function(t2, r4) {
        l[r4] = h - t2;
      }), function(t2) {
        var r4, o4, e2, u3, a3, c3 = t2 + "1", f2 = t2 + "2", s2 = 0;
        for (i3 = n3[c3]; i3 <= n3[f2]; i3++)
          if (v[i3] > h / 2) {
            for (e2 = n3.copy(), u3 = n3.copy(), a3 = (r4 = i3 - n3[c3]) <= (o4 = n3[f2] - i3) ? Math.min(n3[f2] - 1, ~~(i3 + o4 / 2)) : Math.max(n3[c3], ~~(i3 - 1 - r4 / 2)); !v[a3]; )
              a3++;
            for (s2 = l[a3]; !s2 && v[a3 - 1]; )
              s2 = l[--a3];
            return e2[f2] = a3, u3[c3] = e2[f2] + 1, [e2, u3];
          }
      }(a2 == o3 ? "r" : a2 == u2 ? "g" : "b");
    }
  }
  return a.prototype = { volume: function(t2) {
    var r3 = this;
    return r3._volume && !t2 || (r3._volume = (r3.r2 - r3.r1 + 1) * (r3.g2 - r3.g1 + 1) * (r3.b2 - r3.b1 + 1)), r3._volume;
  }, count: function(t2) {
    var r3 = this, n3 = r3.histo;
    if (!r3._count_set || t2) {
      var o3, u2, a2, i3 = 0;
      for (o3 = r3.r1; o3 <= r3.r2; o3++)
        for (u2 = r3.g1; u2 <= r3.g2; u2++)
          for (a2 = r3.b1; a2 <= r3.b2; a2++)
            i3 += n3[e(o3, u2, a2)] || 0;
      r3._count = i3, r3._count_set = true;
    }
    return r3._count;
  }, copy: function() {
    var t2 = this;
    return new a(t2.r1, t2.r2, t2.g1, t2.g2, t2.b1, t2.b2, t2.histo);
  }, avg: function(t2) {
    var n3 = this, o3 = n3.histo;
    if (!n3._avg || t2) {
      var u2, a2, i3, c2, f = 0, s = 1 << 8 - r2, h = 0, v = 0, l = 0;
      for (a2 = n3.r1; a2 <= n3.r2; a2++)
        for (i3 = n3.g1; i3 <= n3.g2; i3++)
          for (c2 = n3.b1; c2 <= n3.b2; c2++)
            f += u2 = o3[e(a2, i3, c2)] || 0, h += u2 * (a2 + 0.5) * s, v += u2 * (i3 + 0.5) * s, l += u2 * (c2 + 0.5) * s;
      n3._avg = f ? [~~(h / f), ~~(v / f), ~~(l / f)] : [~~(s * (n3.r1 + n3.r2 + 1) / 2), ~~(s * (n3.g1 + n3.g2 + 1) / 2), ~~(s * (n3.b1 + n3.b2 + 1) / 2)];
    }
    return n3._avg;
  }, contains: function(t2) {
    var r3 = this, o3 = t2[0] >> n2;
    return gval = t2[1] >> n2, bval = t2[2] >> n2, o3 >= r3.r1 && o3 <= r3.r2 && gval >= r3.g1 && gval <= r3.g2 && bval >= r3.b1 && bval <= r3.b2;
  } }, i2.prototype = { push: function(t2) {
    this.vboxes.push({ vbox: t2, color: t2.avg() });
  }, palette: function() {
    return this.vboxes.map(function(t2) {
      return t2.color;
    });
  }, size: function() {
    return this.vboxes.size();
  }, map: function(t2) {
    for (var r3 = this.vboxes, n3 = 0; n3 < r3.size(); n3++)
      if (r3.peek(n3).vbox.contains(t2))
        return r3.peek(n3).color;
    return this.nearest(t2);
  }, nearest: function(t2) {
    for (var r3, n3, o3, e2 = this.vboxes, u2 = 0; u2 < e2.size(); u2++)
      ((n3 = Math.sqrt(Math.pow(t2[0] - e2.peek(u2).color[0], 2) + Math.pow(t2[1] - e2.peek(u2).color[1], 2) + Math.pow(t2[2] - e2.peek(u2).color[2], 2))) < r3 || void 0 === r3) && (r3 = n3, o3 = e2.peek(u2).color);
    return o3;
  }, forcebw: function() {
    var r3 = this.vboxes;
    r3.sort(function(r4, n4) {
      return t.naturalOrder(t.sum(r4.color), t.sum(n4.color));
    });
    var n3 = r3[0].color;
    n3[0] < 5 && n3[1] < 5 && n3[2] < 5 && (r3[0].color = [0, 0, 0]);
    var o3 = r3.length - 1, e2 = r3[o3].color;
    e2[0] > 251 && e2[1] > 251 && e2[2] > 251 && (r3[o3].color = [255, 255, 255]);
  } }, { quantize: function(f, s) {
    if (!f.length || s < 2 || s > 256)
      return false;
    var h = function(t2) {
      var o3, u2 = new Array(1 << 3 * r2);
      return t2.forEach(function(t3) {
        o3 = e(t3[0] >> n2, t3[1] >> n2, t3[2] >> n2), u2[o3] = (u2[o3] || 0) + 1;
      }), u2;
    }(f);
    h.forEach(function() {
    });
    var v = function(t2, r3) {
      var o3, e2, u2, i3 = 1e6, c2 = 0, f2 = 1e6, s2 = 0, h2 = 1e6, v2 = 0;
      return t2.forEach(function(t3) {
        (o3 = t3[0] >> n2) < i3 ? i3 = o3 : o3 > c2 && (c2 = o3), (e2 = t3[1] >> n2) < f2 ? f2 = e2 : e2 > s2 && (s2 = e2), (u2 = t3[2] >> n2) < h2 ? h2 = u2 : u2 > v2 && (v2 = u2);
      }), new a(i3, c2, f2, s2, h2, v2, r3);
    }(f, h), l = new u(function(r3, n3) {
      return t.naturalOrder(r3.count(), n3.count());
    });
    function g(t2, r3) {
      for (var n3, e2 = t2.size(), u2 = 0; u2 < o2; ) {
        if (e2 >= r3)
          return;
        if (u2++ > o2)
          return;
        if ((n3 = t2.pop()).count()) {
          var a2 = c(h, n3), i3 = a2[0], f2 = a2[1];
          if (!i3)
            return;
          t2.push(i3), f2 && (t2.push(f2), e2++);
        } else
          t2.push(n3), u2++;
      }
    }
    l.push(v), g(l, 0.75 * s);
    for (var p = new u(function(r3, n3) {
      return t.naturalOrder(r3.count() * r3.volume(), n3.count() * n3.volume());
    }); l.size(); )
      p.push(l.pop());
    g(p, s);
    for (var b = new i2(); p.size(); )
      b.push(p.pop());
    return b;
  } };
}().quantize;
var n = function(t2) {
  this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d"), this.width = this.canvas.width = t2.naturalWidth, this.height = this.canvas.height = t2.naturalHeight, this.context.drawImage(t2, 0, 0, this.width, this.height);
};
n.prototype.getImageData = function() {
  return this.context.getImageData(0, 0, this.width, this.height);
};
var o = function() {
};
o.prototype.getColor = function(t2, r2) {
  return void 0 === r2 && (r2 = 10), this.getPalette(t2, 5, r2)[0];
}, o.prototype.getPalette = function(t2, o2, e) {
  var u = function(t3) {
    var r2 = t3.colorCount, n2 = t3.quality;
    if (void 0 !== r2 && Number.isInteger(r2)) {
      if (1 === r2)
        throw new Error("colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()");
      r2 = Math.max(r2, 2), r2 = Math.min(r2, 20);
    } else
      r2 = 10;
    return (void 0 === n2 || !Number.isInteger(n2) || n2 < 1) && (n2 = 10), { colorCount: r2, quality: n2 };
  }({ colorCount: o2, quality: e }), a = new n(t2), i2 = function(t3, r2, n2) {
    for (var o3, e2, u2, a2, i3, c2 = t3, f = [], s = 0; s < r2; s += n2)
      e2 = c2[0 + (o3 = 4 * s)], u2 = c2[o3 + 1], a2 = c2[o3 + 2], (void 0 === (i3 = c2[o3 + 3]) || i3 >= 125) && (e2 > 250 && u2 > 250 && a2 > 250 || f.push([e2, u2, a2]));
    return f;
  }(a.getImageData().data, a.width * a.height, u.quality), c = r(i2, u.colorCount);
  return c ? c.palette() : null;
}, o.prototype.getColorFromUrl = function(t2, r2, n2) {
  var o2 = this, e = document.createElement("img");
  e.addEventListener("load", function() {
    var u = o2.getPalette(e, 5, n2);
    r2(u[0], t2);
  }), e.src = t2;
}, o.prototype.getImageData = function(t2, r2) {
  var n2 = new XMLHttpRequest();
  n2.open("GET", t2, true), n2.responseType = "arraybuffer", n2.onload = function() {
    if (200 == this.status) {
      var t3 = new Uint8Array(this.response);
      i = t3.length;
      for (var n3 = new Array(i), o2 = 0; o2 < t3.length; o2++)
        n3[o2] = String.fromCharCode(t3[o2]);
      var e = n3.join(""), u = window.btoa(e);
      r2("data:image/png;base64," + u);
    }
  }, n2.send();
}, o.prototype.getColorAsync = function(t2, r2, n2) {
  var o2 = this;
  this.getImageData(t2, function(t3) {
    var e = document.createElement("img");
    e.addEventListener("load", function() {
      var t4 = o2.getPalette(e, 5, n2);
      r2(t4[0], this);
    }), e.src = t3;
  });
};
export {
  o as default
};
//# sourceMappingURL=colorthief.js.map
